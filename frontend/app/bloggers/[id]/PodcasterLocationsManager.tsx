"use client";
import { useState } from "react";
import { API_BASE } from "../../../lib/api";

type Shot = {
  id: string;
  prompt: string;
  image_url: string;
};

type Props = {
  bloggerId: number;
  faceImage: string;
  locations: Shot[];
  onShotsChange: (locations: Shot[]) => void;
};

export default function PodcasterShotsManager({
  bloggerId,
  faceImage,
  locations,
  onShotsChange,
}: Props) {
  const [prompt, setPrompt] = useState("");
  const [generating, setGenerating] = useState(false);

  const handleGenerate = async () => {
    if (!faceImage) {
      alert("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ª–∏—Ü–æ –ø–æ–¥–∫–∞—Å—Ç–µ—Ä–∞");
      return;
    }

    if (!prompt.trim()) {
      alert("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–∫—É—Ä—Å–∞");
      return;
    }

    setGenerating(true);
    try {
      const res = await fetch(`${API_BASE}/api/bloggers/${bloggerId}/locations/generate-with-face`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ face_image: faceImage, prompt }),
      });

      if (!res.ok) throw new Error("Generation failed");

      const data = await res.json();
      const newShot: Shot = {
        id: `loc_${Date.now()}`,
        prompt,
        image_url: data.image_url,
      };

      onShotsChange([...locations, newShot]);
      setPrompt("");
    } catch (e) {
      console.error("Failed to generate location:", e);
      alert("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞–∫—É—Ä—Å–∞");
    } finally {
      setGenerating(false);
    }
  };

  const handleDelete = (id: string) => {
    onShotsChange(locations.filter((loc) => loc.id !== id));
  };

  return (
    <div className="space-y-6">
      {/* Instructions */}
      {!faceImage && (
        <div className="card p-4 bg-yellow-500/10 border-yellow-500/30">
          <div className="text-yellow-400 text-sm">
            ‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ª–∏—Ü–æ –ø–æ–¥–∫–∞—Å—Ç–µ—Ä–∞ –≤–æ –≤–∫–ª–∞–¥–∫–µ &quot;–ü–µ—Ä—Å–æ–Ω–∞–∂&quot;
          </div>
        </div>
      )}

      {faceImage && (
        <div className="card p-4 bg-blue-500/10 border-blue-500/30">
          <div className="text-blue-300 text-sm">
            üí° Seedream –≤ —Ä–µ–∂–∏–º–µ edit –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–∏—Ü–æ –∫–∞–∫ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω–æ–µ —Ç–µ–ª–æ –≤ —Ä–∞–∫—É—Ä—Å–∞
          </div>
        </div>
      )}

      {/* Generator */}
      <div className="card p-6 space-y-4">
        <h3 className="text-lg font-semibold">–î–æ–±–∞–≤–∏—Ç—å —Ä–∞–∫—É—Ä—Å—é</h3>

        <div>
          <label className="block text-sm text-gray-400 mb-2">–û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–∫—É—Ä—Å–∞</label>
          <textarea
            value={prompt}
            onChange={(e) => setPrompt(e.target.value)}
            className="input min-h-[100px]"
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: —Å—Ç–æ–∏—Ç –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Ç—É–¥–∏–∏ —Å –Ω–µ–æ–Ω–æ–≤–æ–π –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π, –Ω–∞ —Ñ–æ–Ω–µ –∫–Ω–∏–∂–Ω—ã–µ –ø–æ–ª–∫–∏, –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–∞—è –æ–¥–µ–∂–¥–∞, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—ä–µ–º–∫–∞"
            disabled={!faceImage}
          />
        </div>

        <button
          onClick={handleGenerate}
          disabled={generating || !prompt.trim() || !faceImage}
          className="btn btn-primary disabled:opacity-50"
        >
          {generating ? "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è..." : "üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∫—É—Ä—Å—é"}
        </button>
      </div>

      {/* Shots grid */}
      {locations.length > 0 && (
        <div>
          <h3 className="text-lg font-semibold mb-4">
            —Ä–∞–∫—É—Ä—Å–∞ ({locations.length})
          </h3>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {locations.map((location) => (
              <div key={location.id} className="card p-3 space-y-2">
                <div className="relative aspect-[3/4] rounded-lg overflow-hidden bg-white/5 border border-white/10">
                  <img
                    src={location.image_url}
                    alt="Shot"
                    className="w-full h-full object-cover"
                  />
                </div>

                <p className="text-sm text-gray-400 line-clamp-2">{location.prompt}</p>

                <button
                  onClick={() => handleDelete(location.id)}
                  className="btn btn-sm w-full text-red-400 hover:bg-red-500/10"
                >
                  üóë –£–¥–∞–ª–∏—Ç—å
                </button>
              </div>
            ))}
          </div>
        </div>
      )}

      {locations.length === 0 && faceImage && (
        <div className="text-center py-12 text-gray-500">
          <div className="text-4xl mb-2">üè¢</div>
          <div>—Ä–∞–∫—É—Ä—Å–π –ø–æ–∫–∞ –Ω–µ—Ç. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é!</div>
        </div>
      )}
    </div>
  );
}
